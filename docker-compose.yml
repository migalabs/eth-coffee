version: "3.8"

x-analyzer-base:
  &analyzer-base
  image: migalabs/goteth:v0.0.1

services:

  db:
    image: postgres:14.1-alpine
    restart: always
    networks: [ cluster ]
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes: 
      - ./postgresql/init-database.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
      - ./postgresql/triggers.sql:/triggers.sql
      - ./postgresql/trigger_val_window.sql:/trigger_val_window.sql
      - ./data/postgresql:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U user -d ethseer
      interval: 10s
      timeout: 3s
      retries: 3

  ethseer-client:
    build:
      context: ./ethseer/
      dockerfile: Dockerfile.client
      args:
        - NGINX_PORT=${NGINX_PORT:-80}
        - PUBLIC_IP=${PUBLIC_IP}
        - ETHSEER_CLIENT_VERSION=${ETHSEER_CLIENT_VERSION:-v0.3.0-test}
        - NEXT_PUBLIC_URL_API=${NEXT_PUBLIC_URL_API}
        - NEXT_PUBLIC_GOOGLE_ANALYTICS=${NEXT_PUBLIC_GOOGLE_ANALYTICS:-}
        - NEXT_PUBLIC_TAG_MANAGER=${NEXT_PUBLIC_TAG_MANAGER:-}
        - NEXT_PUBLIC_NETWORK_GENESIS=${NEXT_PUBLIC_NETWORK_GENESIS:-1606824023000}
    networks: [ cluster ]
    ports:
      - 3000:3000
    init: true
    restart: unless-stopped
    
  ethseer-server:
    build:
      context: ./ethseer/
      dockerfile: Dockerfile.server
      args:
        - ETHSEER_SERVER_VERSION=${ETHSEER_SERVER_VERSION:-v0.3.0-test}
        - CALLS_VERBOSE=${CALLS_VERBOSE:-True}
        - API_LISTEN_PORT=3020
        - API_LISTEN_IP=0.0.0.0
        - DB_USER=${DB_USER:-user}
        - DB_HOST=${DB_HOST:-db}
        - DB_NAME=${DB_NAME:-ethseer}
        - DB_PORT=${DB_PORT:-5432}
        - DB_PASSWORD=${DB_PASSWORD:-password}
    init: true
    restart: unless-stopped
    networks: [ cluster ]
    
  nginx:
    restart: always
    image: "nginx:latest"
    ports:
      - "${NGINX_PORT}:5085"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    networks: [ cluster ]
  
  analyzer-rewards:
    <<: *analyzer-base
    networks: [ cluster ]
    init: true
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    command: >-
      rewards
      --log-level=${STATE_ANALYZER_LOG_LEVEL:-info}
      --bn-endpoint=${ANALYZER_BN_ENDPOINT:-localhost:5052}
      --init-slot=${STATE_ANALYZER_INIT_SLOT:-0}
      --final-slot=${STATE_ANALYZER_FINAL_SLOT:-1000}
      --db-url=${ANALYZER_DB_URL:-postgresql://user:password@db:5432/ethseer}
      --workers-num=${STATE_ANALYZER_WORKERS_NUM:-10}
      --db-workers-num=${STATE_ANALYZER_DB_WORKERS_NUM:-4}
      --download-mode=${STATE_ANALYZER_DOWNLOAD_MODE:-finalized}
                        
  analyzer-blocks:
    <<: *analyzer-base
    networks: [ cluster ]
    init: true
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    command: >-
      blocks
      --log-level=${BLOCK_ANALYZER_LOG_LEVEL:-info}
      --bn-endpoint=${ANALYZER_BN_ENDPOINT:-localhost:5052}
      --init-slot=${BLOCK_ANALYZER_INIT_SLOT:-0}
      --final-slot=${BLOCK_ANALYZER_FINAL_SLOT:-1000}
      --db-url=${ANALYZER_DB_URL:-postgresql://user:password@db:5432/ethseer}
      --workers-num=${BLOCK_ANALYZER_WORKERS_NUM:-1}
      --db-workers-num=${BLOCK_ANALYZER_DB_WORKERS_NUM:-1}
      --download-mode=${BLOCK_ANALYZER_DOWNLOAD_MODE:-hybrid}

networks:
  cluster: